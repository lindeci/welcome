@startuml hypergraph
struct RelationalExpression {
+    RelationalExpression::Type type;
+    table_map tables_in_subtree;
+    hypergraph::NodeMap nodes_in_subtree;
+    const Table_ref *table;
+    Mem_root_array<Item*> join_conditions_pushable_to_this;
+    CompanionSet *companion_set;
+    RelationalExpression *left;
+    RelationalExpression *right;
+    Mem_root_array<RelationalExpression*> multi_children;
+    Mem_root_array<Item*> join_conditions;
+    Mem_root_array<Item_eq_base*> equijoin_conditions;
+    Mem_root_array<CachedPropertiesForPredicate> properties_for_join_conditions;
+    Mem_root_array<CachedPropertiesForPredicate> properties_for_equijoin_conditions;
+    bool join_conditions_reject_all_rows;
+    table_map conditions_used_tables;
+    int join_predicate_first;
+    int join_predicate_last;
+    Mem_root_array<ConflictRule> conflict_rules;
+    RelationalExpression(THD *);
}

enum RelationalExpression::Type {
    RelationalExpression::INNER_JOIN, 
    RelationalExpression::LEFT_JOIN, 
    RelationalExpression::SEMIJOIN = 3, 
    RelationalExpression::ANTIJOIN = 2, 
    RelationalExpression::STRAIGHT_INNER_JOIN = 101, 
    RelationalExpression::FULL_OUTER_JOIN = 4, 
    RelationalExpression::MULTI_INNER_JOIN = 102, 
    RelationalExpression::TABLE = 100
}

RelationalExpression::type --* RelationalExpression::Type

class Item_eq_base {
  public:
    Item_equal *source_multiple_equality;
}

 class Item_func_comparison  {
}

Item_eq_base --|> Item_func_comparison

class Item_bool_func2  {
  protected:
    Arg_comparator cmp;
    bool abort_on_null;
}

Item_func_comparison --|> Item_bool_func2

class Item_bool_func {
  private:
    bool m_created_by_in2exists;
}

Item_bool_func2 --|> Item_bool_func


class Item_bool_func {
  private:
    bool m_created_by_in2exists;
}

Item_bool_func --|> Item_int_func

class Item_int_func {
}


class Item_func  {
  protected:
    Item **args;
  private:
    Item *m_embedded_arguments[2];
  public:
    uint arg_count;
  protected:
    bool null_on_null;
    uint allowed_arg_cols;
    table_map used_tables_cache;
    table_map not_null_tables_cache;
}

Item_int_func --|> Item_func

class Item_result_field  {
  protected:
    Field *result_field;
}

Item_func --|> Item_result_field

class Item  {
  public:
    Item *next_free;
  protected:
    String str_value;
  public:
    DTCollation collation;
    Item_name_string item_name;
    Item_name_string orig_name;
    uint32 max_length;
    Item::item_marker marker;
    Item_result cmp_context;
  private:
    uint m_ref_count;
    bool m_abandoned;
    const bool is_parser_item;
    uint8 m_data_type;
    CostOfItem m_cost;
  public:
    bool fixed;
    uint8 decimals;
  private:
    bool m_nullable;
  public:
    bool null_value;
    bool unsigned_flag;
    bool m_is_window_function;
    bool hidden;
    bool m_in_check_constraint_exec_ctx;
  private:
    static const uint8 PROP_SUBQUERY;
    static const uint8 PROP_STORED_PROGRAM;
    static const uint8 PROP_AGGREGATION;
    static const uint8 PROP_WINDOW_FUNCTION;
    static const uint8 PROP_ROLLUP_EXPR;
    static const uint8 PROP_GROUPING_FUNC;
  protected:
    uint8 m_accum_properties;
}

Item_result_field --|> Item

class Parse_tree_node_tmpl<Parse_context> {
  private:
    bool contextualized;
  public:
    POS m_pos;
}

Item --|> Parse_tree_node_tmpl

struct CachedPropertiesForPredicate {
    Mem_root_array<ContainedSubquery> contained_subqueries;
    double selectivity;
    OverflowBitset redundant_against_sargable_predicates;
}

struct ContainedSubquery {
    AccessPath *path;
    ContainedSubquery::Strategy strategy;
    int row_width;
}

enum ContainedSubquery::Strategy {
    ContainedSubquery::Strategy::kMaterializable, 
    ContainedSubquery::Strategy::kNonMaterializable, 
    ContainedSubquery::Strategy::kIndependentSingleRow
}

CachedPropertiesForPredicate::contained_subqueries --* ContainedSubquery
ContainedSubquery::strategy --* ContainedSubquery::Strategy

class OverflowBitset {
  protected:
    union {
        uint64_t m_bits;
        OverflowBitset::Ext *m_ext;
    };
  private:
    static const int kInlineBits;
}

struct OverflowBitset::Ext {
    size_t m_num_blocks;
    uint64_t m_bits[1];
}

CachedPropertiesForPredicate::redundant_against_sargable_predicates --* OverflowBitset
OverflowBitset::m_ext --* OverflowBitset::Ext

struct AccessPath {
  public:
    AccessPath::Type type;
    AccessPath::Safety safe_for_rowid;
    bool count_examined_rows : 1;
    bool forced_by_dbug : 1;
    int8_t immediate_update_delete_table;
    int ordering_state;
    RowIterator *iterator;
    double cost;
    double init_cost;
    double init_once_cost;
    double num_output_rows_before_filter;
    double cost_before_filter;
    OverflowBitset filter_predicates;
    OverflowBitset delayed_predicates;
    hypergraph::NodeMap parameter_tables;
    void *secondary_engine_data;
  private:
    double m_num_output_rows;
    union {
        struct {...} table_scan;
        struct {...} index_scan;
        struct {...} ref;
        struct {...} ref_or_null;
        struct {...} eq_ref;
        struct {...} pushed_join_ref;
        struct {...} full_text_search;
        struct {...} const_table;
        struct {...} mrr;
        struct {...} follow_tail;
        struct {...} index_range_scan;
        struct {...} index_merge;
        struct {...} rowid_intersection;
        struct {...} rowid_union;
        struct {...} index_skip_scan;
        struct {...} group_index_skip_scan;
        struct {...} dynamic_index_range_scan;
        struct {...} materialized_table_function;
        struct {...} unqualified_count;
        struct {...} table_value_constructor;
        struct {...} fake_single_row;
        struct {...} zero_rows;
        struct {...} zero_rows_aggregated;
        struct {...} hash_join;
        struct {...} bka_join;
        struct {...} nested_loop_join;
        struct {...} nested_loop_semijoin_with_duplicate_removal;
        struct {...} filter;
        struct {...} sort;
        struct {...} aggregate;
        struct {...} temptable_aggregate;
        struct {...} limit_offset;
        struct {...} stream;
        struct {...} materialize;
        struct {...} materialize_information_schema_table;
        struct {...} append;
        struct {...} window;
        struct {...} weedout;
        struct {...} remove_duplicates;
        struct {...} remove_duplicates_on_index;
        struct {...} alternative;
        struct {...} cache_invalidator;
        struct {...} delete_rows;
        struct {...} update_rows;
    } u;
}

ContainedSubquery::path --* AccessPath

RelationalExpression::properties_for_join_conditions --* CachedPropertiesForPredicate

entity hypergraph::NodeMap {
+    type = unsigned long
}
note left
  64 位的长整型，
  其中 61 位每位表示一个 node
end note

struct hypergraph::Hyperedge {
+    hypergraph::NodeMap left;
+    hypergraph::NodeMap right;
}

struct hypergraph::Node {
+    std::vector<unsigned int> complex_edges;
+    std::vector<unsigned int> simple_edges;
+    hypergraph::NodeMap simple_neighborhood;
+    static const int Size;
-    char padding[8];
}
note right
  两个 std::vector 占 2*(8*3)=48 位，
  hypergraph::NodeMap 占用 8 位，
  static const int 占用 4 位，
  char padding[8] 为了使该结构体占用64位
end note

hypergraph::NodeMap *-- hypergraph::Hyperedge::left
hypergraph::NodeMap *-- hypergraph::Hyperedge::right
hypergraph::NodeMap *-- hypergraph::Node::simple_neighborhood

struct hypergraph::Hypergraph {
+    Mem_root_array<hypergraph::Node> nodes;
+    Mem_root_array<hypergraph::Hyperedge> edges;

+    Hypergraph(MEM_ROOT *);
+    void AddNode(void);
+    void AddEdge(hypergraph::NodeMap, hypergraph::NodeMap);
+    void ModifyEdge(unsigned int, hypergraph::NodeMap, hypergraph::NodeMap);
-    void AttachEdgeToNodes(size_t, size_t, hypergraph::NodeMap, hypergraph::NodeMap);
}

hypergraph::Hypergraph::nodes --* hypergraph::Node
hypergraph::Hypergraph::edges --* hypergraph::Hyperedge

struct JoinHypergraph {
+    hypergraph::Hypergraph graph;
+    SecondaryEngineCostingFlags secondary_engine_costing_flags;
+    std::array<int, 61> table_num_to_node_num;
+    Mem_root_array<JoinHypergraph::Node> nodes;
+    Mem_root_array<JoinPredicate> edges;
+    Mem_root_array<Predicate> predicates;
+    unsigned int num_where_predicates;
+    OverflowBitset materializable_predicates;
+    mem_root_unordered_map<Item*, int, std::hash<Item*>, std::equal_to<Item*>> sargable_join_predicates;
+    bool has_reordered_left_joins;
+    table_map tables_inner_to_outer_or_anti;

-    const Query_block *m_query_block;

+    JoinHypergraph(MEM_ROOT *, const Query_block *);
+    const Query_block * query_block(void) const;
+    const JOIN * join(void) const;
}

struct JoinPredicate {
+    RelationalExpression *expr;
+    double selectivity;
+    size_t estimated_bytes_per_row;
+    FunctionalDependencySet functional_dependencies;
+    Mem_root_array<int> functional_dependencies_idx;
+    int ordering_idx_needed_for_semijoin_rewrite;
+    Item **semijoin_group;
+    int semijoin_group_size;
}
JoinHypergraph::edges --* JoinPredicate

struct Predicate {
    Item *condition;
    hypergraph::NodeMap used_nodes;
    hypergraph::NodeMap total_eligibility_set;
    double selectivity;
    bool was_join_condition;
    int source_multiple_equality_idx;
    FunctionalDependencySet functional_dependencies;
    Mem_root_array<int> functional_dependencies_idx;
    Mem_root_array<ContainedSubquery> contained_subqueries;
}
JoinHypergraph::predicates --* Predicate

struct JoinHypergraph::Node {
    TABLE *table;
    Mem_root_array<Item*> join_conditions_pushable_to_this;
    Mem_root_array<SargablePredicate> sargable_predicates;
    const CompanionSet *companion_set;
}

struct SargablePredicate {
+    int predicate_index;
+    Field *field;
+    Item *other_side;
+    bool can_evaluate;
}
note right of SargablePredicate
Sargable 是一个 SQL 术语，
它表示一个查询条件（或谓词）可以利用索引来加速查询的执行。
这个术语是由 Search ARGument ABLE 的缩写而来的。
end note

note right of SargablePredicate::other_side
The predicate is assumed to be <field> = <other_side>
end note

class CompanionSet {
-    Mem_root_array<CompanionSet::EqualTerm> m_equal_terms;
+    CompanionSet(void);
+    CompanionSet(THD *);
+    CompanionSet(const CompanionSet &);
+    CompanionSet & operator=(const CompanionSet &);
+    void AddEquijoinCondition(THD *, const Item_func_eq &);
+    table_map GetEqualityMap(const Field &) const;
+    std::string ToString(void) const;
-    typedef Mem_root_array<Field const*> FieldArray;
}
note left of CompanionSet
假设我们有三个表：A、B和C。
表A和表B通过内连接关联，
表B和表C也通过内连接关联。
在这种情况下，我们可以说
A、B和C形成了一个"companion set"。
end note

note right of CompanionSet::m_equal_terms
举例：
     如果我们有个查询：
     SELECT ... FROM t1, t2, t3 WHERE t1.x=t2.x AND t2.x=t3.x AND t2.y=t3.y
     那么 m_equal_terms will contain:
     {{t1.x, t2.x, t3.x}, {t2.y, t3.y}}
end note

struct CompanionSet::EqualTerm {
+    CompanionSet::FieldArray *fields;
+    table_map tables;
}
note right
using FieldArray = Mem_root_array<const Field *>;
表示 The fields that are equal to each other.

using table_map = uint64_t;
表示 A map of all tables in 'fields'.
end note

JoinHypergraph::graph --* hypergraph::Hypergraph
JoinHypergraph::edges --* Mem_root_array
JoinHypergraph::nodes --* JoinHypergraph::Node
JoinHypergraph::Node::sargable_predicates --* SargablePredicate
JoinHypergraph::Node::companion_set --* CompanionSet
CompanionSet::m_equal_terms --* CompanionSet::EqualTerm




class Mem_root_array<Item*> {
+    Mem_root_array(void);
+    Mem_root_array(MEM_ROOT *);
+    Mem_root_array(Mem_root_array<Item*> &&);
+    Mem_root_array(MEM_ROOT *, size_t);
+    Mem_root_array(MEM_ROOT *, size_t, const value_type &);
+    Mem_root_array(MEM_ROOT *, const_iterator, const_iterator);
+    Mem_root_array(MEM_ROOT *, const Mem_root_array<Item*> &);
+    Mem_root_array(std::initializer_list<Item*>);
+    Mem_root_array(const Mem_root_array<Item*> &);
+    Mem_root_array<Item*> & operator=(Mem_root_array<Item*> &&);
+    Mem_root_array<Item*> & operator=(const Mem_root_array<Item*> &);
+    ~Mem_root_array();

+    typedef Element_type value_type;
+    typedef Mem_root_array_YY<Item*>::const_iterator const_iterator;
}

class Mem_root_array_YY<Item*> {
#    MEM_ROOT *m_root;
#    Item **m_array;
#    size_t m_size;
#    size_t m_capacity;

+    typedef Item * const *const_iterator;
+    typedef Element_type value_type;
+    typedef Item **iterator;
}

Mem_root_array --|> Mem_root_array_YY

JoinPredicate::expr --* RelationalExpression
@enduml 